{"version":3,"sources":["components/StravaTable/StravaTable.js","components/RajDistance/RajDistance.js","containers/App.js","serviceWorker.js","index.js"],"names":["StravaTable","props","state","activities","tableHead","tableHeadSecond","user","headers","map","header","i","key","style","padding","borderBottom","athlete","this","setState","row","position","name","runNo","runQuantity","runDistance","cycleNo","bikeQuantity","cycleDistance","bikeDistance","percentage","totalPercent","onClick","setUser","toFixed","index","allRuns","r","dist","distance","time","moving_time","movingTime","oneKM","floor","Math","km","day","start_date","substr","month","allCycles","averageSpeed","separator","sepMethod","length","concat","rows","userRows","marginLeft","marginRight","marginTop","border","getHeader","getDetailRowsData","allRows","sortedRows","sort","a","b","getRowsData","extraSection","Component","RajDistance","users","distances","monthNumber","clientID","secret","refreshToken","token","fetch","method","body","JSON","stringify","client_id","client_secret","refresh_token","grant_type","then","res","json","access_token","activitiesLinkRaj","newActivities","run","cycle","currentMonth","Date","getMonth","setDistance","console","log","setMonth","setUsers","forEach","fetchData","info","id","refresh","athleteID","reAuthFunc","activityType","activity","filter","element","stravaDate","type","accumulator","round","userRun","findAllSpecificActivity","userTotalRan","reduce","getAllKm","userRunPercent","userBike","userTotalBike","userBikePercent","userTotalPercent","runPercentage","bikePercentage","monthList","date","lastMonth","thisMonth","createUserObj","color","backgroundColour","paddingTop","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d93c9a56.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass StravaTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activities: [],\n            tableHead: [\n                'Position',\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'Total Complete'\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Activity Time',\n                'Average Speed',\n            ],\n            user: \"\",\n        }\n    }\n\n    getHeader(headers) {\n        // const headers = this.state.tableHead;\n        return headers.map((header, i) => {\n            return <th key={i} style={{padding: \"5px 10px\", borderBottom: \"1px solid black\"}}>{header}</th>\n        })\n    }\n\n    setUser(athlete) {\n        this.setState({\n            ...this.state,\n            user: athlete,\n        });\n    }\n\n    getRowsData(row, i) {\n        const position = i + 1;\n        const name = row.name;\n        const runNo = row.runQuantity;\n        const runDistance = row.runDistance;\n        const cycleNo = row.bikeQuantity;\n        const cycleDistance = row.bikeDistance;\n        const percentage = row.totalPercent;\n\n        return (\n            <tr onClick={() => this.setUser(name)}>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{position}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{name}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{runNo}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{runDistance} km</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{cycleNo}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{cycleDistance} km</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{percentage.toFixed(2)}%</td>\n            </tr>\n        )\n    }\n\n    sepMethod() {\n        return (\n            <tr>\n                <td key={2000}>-----</td>\n                <td key={2000}>-----</td>\n                <td key={2000}>---------</td>\n                <td key={2000}>--------</td>\n                <td key={2000}>--------</td>\n            </tr>\n        );\n    }\n\n\n    getDetailRowsData(row, index) {\n        const allRuns = row.allRuns ? row.allRuns.map((r, i) => {\n            const dist = r.distance / 1000;\n            const time = r.moving_time / 60;\n            const distance = (r.distance / 1000).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = dist / (time/60);\n            const oneKM = (1 / averageSpeed) * 60;\n            const floor = Math.floor(oneKM);\n            const decimal = (oneKM - floor) * 0.60;\n            const km = (floor + decimal).toFixed(2);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            return (\n            <tr>\n                <td key={index * i + 5}>{day}/{month}</td>\n                <td key={index * i}>Run</td>\n                <td key={index * i + 1}>{distance} km</td>\n                <td key={index * i + 2}>{movingTime} mins</td>\n                <td key={index * i + 3}>{km} /km</td>\n            </tr>\n            );\n        }) : [];\n\n        const allCycles = row.allCycles ? row.allCycles.map((r, i) => {\n            const distance = (r.distance / 1000).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            return (\n                <tr>\n                    <td key={index * i + 5}>{day}/{month}</td>\n                    <td key={index * i}>Cycle</td>\n                    <td key={index * i + 1}>{distance} km</td>\n                    <td key={index * i + 2}>{movingTime} mins</td>\n                    <td key={index * i + 3}>{averageSpeed} km/h</td>\n                </tr>\n            );\n        }) : [];\n\n        const separator = this.sepMethod();\n\n        let activities = allRuns;\n\n        if ((allRuns.length > 0) && (allCycles.length > 0)) {\n            activities = activities.concat(separator);\n        }\n\n        const allActivities = activities.concat(allCycles);\n\n        return allActivities;\n    }\n\n    extraSection(rows) {\n        const user = this.state.user;\n\n        const userRows = rows.map(row => {\n            if (row.name === user) {\n                return row;\n            } else {\n                return [];\n            }\n        })\n\n        if (user === \"\") {\n            return <br />;\n        } else {\n            return (\n                <table style={{marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"20px\", border: \"1px solid black\"}}>\n                    <thead>\n                    <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\n                    </thead>\n                    <tbody>\n                    {userRows.map((row, i) => {\n                        return this.getDetailRowsData(row, i)\n                    })}\n                    </tbody>\n                </table>\n            );\n        }\n    }\n\n    render() {\n        const { allRows } = this.props;\n\n        const sortedRows = allRows.length > 0 ? allRows.sort((a,b) => a.totalPercent > b.totalPercent ? -1 : 1) : [];\n\n        return (\n            <div>\n                <table style={{marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"20px\", border: \"1px solid black\"}}>\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {sortedRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.extraSection(sortedRows)}\n            </div>\n        )\n    }\n}\n\nexport default StravaTable;\n","import React, {Component} from 'react';\nimport StravaTable from \"../StravaTable/StravaTable\";\n\nclass RajDistance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activities: [],\n            users: [],\n            distances: {},\n            month: \"\",\n            monthNumber: \"\",\n        }\n    }\n\n    async fetchData(clientID, secret, refreshToken) {\n        const authLink = \"https://www.strava.com/oauth/token\";\n        let token = \"\";\n\n        await fetch(authLink,{\n            method: 'post',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                client_id: clientID,\n                client_secret: secret,\n                refresh_token: refreshToken,\n                grant_type: \"refresh_token\",\n            })\n        }).then(res => res.json())\n            .then(res => token = res.access_token);\n\n        const activitiesLinkRaj = \"https://www.strava.com/api/v3/athlete/activities?access_token=\" + token;\n        await fetch(activitiesLinkRaj)\n            .then(res => res.json())\n            .then(res => {\n                const activities = [...this.state.activities];\n                const newActivities = activities.concat(res);\n                this.setState({\n                    ...this.state,\n                    activities: newActivities\n                })\n            });\n    }\n\n    setDistance(index) {\n        const currentDistances = {run: 30, cycle: 100}\n        const lastDistances = {run: 30, cycle: 100}\n\n        if (index === 0) {\n            return currentDistances\n        } else {\n            return lastDistances;\n        }\n    }\n\n    setMonth(index) {\n        const monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const date = new Date();\n        const currentMonth = monthList[date.getMonth() - index];\n        const monthNumber = 1 - index;\n        const distance = this.setDistance(index);\n\n        console.log(currentMonth);\n\n        this.setState({\n            ...this.state,\n            month: currentMonth,\n            monthNumber: monthNumber,\n            distances: distance,\n        })\n    }\n\n    async reAuthFunc() {\n        await this.setMonth(0);\n        await this.setUsers();\n\n        const users = this.state.users;\n\n        users.forEach(user => {\n           this.fetchData(user.info.id, user.info.secret, user.info.refresh);\n        });\n    }\n\n    setUsers() {\n        const users = [\n            {\n                name: \"Raj\",\n                athleteID: \"59236473\",\n                info: {\n                    id: \"48974\",\n                    secret: \"4175dc3bd00b8a4ce14886912b653faa6b041b2c\",\n                    refresh: \"1bd817b355142a3fb162f46d2ee0e221f20fe315\",\n                }\n            },\n            {\n                name: \"Ross\",\n                athleteID: \"53092595\",\n                info: {\n                    id: \"49144\",\n                    secret: \"fd67f97dc6d6d79faf65a179604ffc40337cf879\",\n                    refresh: \"beae09e78a559017ce9b83230b5f014cdefff4f9\",\n                }\n            },\n            {\n                name: \"Cally\",\n                athleteID: \"59236853\",\n                info: {\n                    id: \"49145\",\n                    secret: \"a9cd2fef4bcdf252a21aa18fa833cff22fc5fd1a\",\n                    refresh: \"e5f6d38f8d3df4a5ef99ac03fe9ad55f16fa2b3a\",\n                }\n            },\n        ];\n\n        this.setState({\n            ...this.state,\n            users: users\n        });\n    }\n\n    componentDidMount() {\n        this.reAuthFunc();\n    }\n\n    findAllSpecificActivity(activityType, athleteID) {\n\n        const activity = [...this.state.activities];\n        const monthNumber = this.state.monthNumber;\n\n        const date = new Date();\n        const month = date.getMonth() + monthNumber;\n        const all = activity.filter(function (element) {\n            const stravaDate = element.start_date.substr(5, 2)\n            return (element.type === activityType) && (stravaDate == month) && (element.athlete.id == athleteID);\n        });\n\n        return all;\n    }\n\n    getAllKm(accumulator, a) {\n        return Math.round(accumulator + a.distance);\n    }\n\n    createUserObj(athleteID, name) {\n        const runDistance = this.state.distances.run;\n        const bikeDistance = this.state.distances.cycle;\n\n        const userRun = this.findAllSpecificActivity(\"Run\", athleteID);\n        const userTotalRan = userRun.length > 0 ? (userRun.reduce(this.getAllKm,0) / 1000) : 0;\n        const userRunPercent = userTotalRan > runDistance ? 100 : (userTotalRan / runDistance) * 100;\n        const userBike = this.findAllSpecificActivity(\"Ride\", athleteID);\n        const userTotalBike = userBike.length > 0 ? (userBike.reduce(this.getAllKm,0) / 1000) : 0;\n        const userBikePercent = userTotalBike > bikeDistance ? 100 : userTotalBike;\n        const userTotalPercent = (userRunPercent + userBikePercent) / 2;\n        const userObj = {\n            name: name,\n            runQuantity: userRun.length,\n            runDistance: userTotalRan,\n            runPercentage: userRunPercent,\n            bikeQuantity: userBike.length,\n            bikeDistance: userTotalBike,\n            bikePercentage: userBikePercent,\n            totalPercent: userTotalPercent,\n            allRuns: userRun,\n            allCycles: userBike,\n        };\n\n        return userObj;\n    }\n\n    render() {\n        const users = this.state.users;\n        const monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const date = new Date();\n        const lastMonth = monthList[date.getMonth() - 1];\n        const thisMonth = monthList[date.getMonth()];\n        const month = this.state.month;\n\n\n        const allRows = users.map(user => {\n           return this.createUserObj(user.athleteID, user.name);\n        });\n\n        return (\n            <div>\n                <h2 style={{padding: \"20px 20px 0 20px\"}}>Boys Dualathalon</h2>\n                <button style={{color: \"black\", backgroundColour: \"white\", border: \"2px solid #808080\", marginRight: \"5px\"}} onClick={() => this.setMonth(1)}>{lastMonth}</button>\n                <button style={{color: \"black\", backgroundColour: \"white\", border: \"2px solid #808080\", marginLeft: \"5px\"}} onClick={() => this.setMonth(0)}>{thisMonth}</button>\n                <h4 style={{paddingTop: \"10px\"}}>{month} Challenge</h4>\n                <h6>Run {this.state.distances.run} km  |  Cycle {this.state.distances.cycle} km</h6>\n                <StravaTable allRows={allRows} />\n            </div>\n        )\n    }\n}\n\nexport default RajDistance;\n","import React, {Component} from 'react';\nimport './App.css'\nimport RajDistance from '../components/RajDistance/RajDistance';\n\nclass App extends Component {\n  render () {\n    return (\n        <div className=\"App\">\n          <RajDistance />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}