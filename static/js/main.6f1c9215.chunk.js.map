{"version":3,"sources":["components/Masthead/Masthead.js","components/StravaTable/StravaTable.js","components/RajDistance/RajDistance.js","containers/App.js","serviceWorker.js","index.js"],"names":["masthead","style","padding","StravaTable","props","state","activities","tableHead","this","map","header","i","key","borderBottom","row","position","name","runNo","runQuantity","runDistance","cycleNo","bikeQuantity","cycleDistance","bikeDistance","percentage","totalPercent","toFixed","allRows","sortedRows","length","sort","a","b","console","log","marginLeft","marginRight","marginTop","border","getHeader","getRowsData","Component","RajDistance","clientID","secret","refreshToken","token","fetch","method","headers","body","JSON","stringify","client_id","client_secret","refresh_token","grant_type","then","res","json","access_token","activitiesLinkRaj","newActivities","concat","setState","fetchData","reAuthFunc","activityType","athleteID","activity","month","Date","getMonth","filter","element","stravaDate","start_date","substr","type","athlete","id","accumulator","Math","round","distance","rajRun","findAllSpecificActivity","rajTotalRan","reduce","getAllKm","rajRunPercent","rajBike","rajTotalBike","rajBikePercent","rajTotalPercent","rajObj","runPercentage","bikePercentage","rossRun","rossTotalRan","rossRunPercent","rossBike","rossTotalBike","rossBikePercent","rossTotalPercent","rossObj","callyRun","callyTotalRan","callyRunPercent","callyBike","callyTotalBike","callyBikePercent","callyTotalPercent","App","className","Masthead","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f1c9215.chunk.js","sourcesContent":["import React from 'react';\n\nconst masthead = () => {\n    return <h2 style={{padding: \"20px\"}}>Boys Dualathalon</h2>\n};\n\nexport default masthead;","import React, {Component} from 'react';\n\nclass StravaTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activities: [],\n            tableHead: [\n                'Position',\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'Total Complete'\n            ],\n        }\n    }\n\n    getHeader() {\n        const headers = this.state.tableHead;\n        return headers.map((header, i) => {\n            return <th key={i} style={{padding: \"5px 10px\", borderBottom: \"1px solid black\"}}>{header}</th>\n        })\n    }\n\n    getRowsData(row, i) {\n        const position = i + 1;\n        const name = row.name;\n        const runNo = row.runQuantity;\n        const runDistance = row.runDistance;\n        const cycleNo = row.bikeQuantity;\n        const cycleDistance = row.bikeDistance;\n        const percentage = row.totalPercent;\n\n        return (\n            <tr>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{position}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{name}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{runNo}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{runDistance} km</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{cycleNo}</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{cycleDistance} km</td>\n                <td key={i} style={{padding: \"5px 0\", borderBottom: \"1px solid black\"}}>{percentage.toFixed(2)}%</td>\n            </tr>\n        )\n    }\n\n    render() {\n        const { allRows } = this.props;\n\n        const sortedRows = allRows.length > 0 ? allRows.sort((a,b) => a.totalPercent > b.totalPercent ? -1 : 1) : [];\n\n        console.log(allRows);\n        console.log(sortedRows);\n\n        return (\n            <div>\n                <table style={{marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"20px\", border: \"1px solid black\"}}>\n                    <thead>\n                        <tr>{this.getHeader()}</tr>\n                    </thead>\n                    <tbody>\n                        {sortedRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default StravaTable;","import React, {Component} from 'react';\nimport StravaTable from \"../StravaTable/StravaTable\";\n\nclass RajDistance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activities: [],\n        }\n    }\n\n    async fetchData(clientID, secret, refreshToken) {\n        const authLink = \"https://www.strava.com/oauth/token\";\n        let token = \"\";\n\n        await fetch(authLink,{\n            method: 'post',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                client_id: clientID,\n                client_secret: secret,\n                refresh_token: refreshToken,\n                grant_type: \"refresh_token\",\n            })\n        }).then(res => res.json())\n            .then(res => token = res.access_token);\n\n        const activitiesLinkRaj = \"https://www.strava.com/api/v3/athlete/activities?access_token=\" + token;\n        await fetch(activitiesLinkRaj)\n            .then(res => res.json())\n            .then(res => {\n                const activities = [...this.state.activities];\n                const newActivities = activities.concat(res);\n                this.setState({activities: newActivities})\n            });\n    }\n\n    reAuthFunc() {\n        const rajID = \"48974\";\n        const rajSecret = \"4175dc3bd00b8a4ce14886912b653faa6b041b2c\";\n        const rajRefresh = \"1bd817b355142a3fb162f46d2ee0e221f20fe315\";\n\n        const rossID = \"49144\";\n        const rossSecret = \"fd67f97dc6d6d79faf65a179604ffc40337cf879\";\n        const rossRefresh = \"beae09e78a559017ce9b83230b5f014cdefff4f9\";\n\n        const callyID = \"49145\";\n        const callySecret = \"a9cd2fef4bcdf252a21aa18fa833cff22fc5fd1a\";\n        const callyRefresh = \"e5f6d38f8d3df4a5ef99ac03fe9ad55f16fa2b3a\";\n\n        this.fetchData(rajID, rajSecret, rajRefresh);\n        this.fetchData(rossID, rossSecret, rossRefresh);\n        this.fetchData(callyID, callySecret, callyRefresh);\n    }\n\n    componentDidMount() {\n        this.reAuthFunc();\n    }\n\n    findAllSpecificActivity(activityType, athleteID) {\n\n        const activity = [...this.state.activities];\n\n        const date = new Date();\n        const month = date.getMonth() + 1;\n        const all = activity.filter(function (element) {\n            const stravaDate = element.start_date.substr(5, 2)\n            return (element.type === activityType) && (stravaDate == month) && (element.athlete.id == athleteID);\n        });\n\n        return all;\n    }\n\n    getAllKm(accumulator, a) {\n        return Math.round(accumulator + a.distance);\n    }\n\n    render() {\n        const rajAthleteID = \"59236473\";\n        const rossAthleteID = \"53092595\";\n        const callyAthleteID = \"59236853\";\n\n        const rajRun = this.findAllSpecificActivity(\"Run\", rajAthleteID);\n        const rajTotalRan = rajRun.length > 0 ? (rajRun.reduce(this.getAllKm,0) / 1000) : 0;\n        const rajRunPercent = rajTotalRan > 30 ? 100 : (rajTotalRan / 30) * 100;\n        const rajBike = this.findAllSpecificActivity(\"Ride\", rajAthleteID);\n        const rajTotalBike = rajBike.length > 0 ? (rajBike.reduce(this.getAllKm,0) / 1000) : 0;\n        const rajBikePercent = rajTotalBike > 100 ? 100 : rajTotalBike;\n        const rajTotalPercent = (rajRunPercent + rajBikePercent) / 2;\n        const rajObj = {name: \"Raj\", runQuantity: rajRun.length, runDistance: rajTotalRan, runPercentage: rajRunPercent, bikeQuantity: rajBike.length, bikeDistance: rajTotalBike, bikePercentage: rajBikePercent, totalPercent: rajTotalPercent};\n\n        const rossRun = this.findAllSpecificActivity(\"Run\", rossAthleteID);\n        const rossTotalRan = rossRun.length > 0 ? (rossRun.reduce(this.getAllKm,0) / 1000) : 0;\n        const rossRunPercent = rossTotalRan > 30 ? 100 : (rossTotalRan / 30) * 100;\n        const rossBike = this.findAllSpecificActivity(\"Ride\", rossAthleteID);\n        const rossTotalBike = rossBike.length > 0 ? (rossBike.reduce(this.getAllKm,0) / 1000) : 0;\n        const rossBikePercent = rossTotalBike > 100 ? 100 : rossTotalBike;\n        const rossTotalPercent = (rossRunPercent + rossBikePercent) / 2;\n        const rossObj = {name: \"Ross\", runQuantity: rossRun.length, runDistance: rossTotalRan, runPercentage: rossRunPercent, bikeQuantity: rossBike.length, bikeDistance: rossTotalBike, bikePercentage: rossBikePercent, totalPercent: rossTotalPercent};\n\n        const callyRun = this.findAllSpecificActivity(\"Run\", callyAthleteID);\n        const callyTotalRan = callyRun.length > 0 ? (callyRun.reduce(this.getAllKm,0) / 1000) : 0;\n        const callyRunPercent = callyTotalRan > 30 ? 100 : (callyTotalRan / 30) * 100;\n        const callyBike = this.findAllSpecificActivity(\"Ride\", callyAthleteID);\n        const callyTotalBike = callyBike.length > 0 ? (callyBike.reduce(this.getAllKm,0) / 1000) : 0;\n        const callyBikePercent = callyTotalBike > 100 ? 100 : callyTotalBike;\n        const callyTotalPercent = (callyRunPercent + callyBikePercent) / 2;\n        const callyObj = {name: \"Cally\", runQuantity: callyRun.length, runDistance: callyTotalRan, runPercentage: callyRunPercent, bikeQuantity: callyBike.length, bikeDistance: callyTotalBike, bikePercentage: callyBikePercent, totalPercent: callyTotalPercent};\n\n        const allRows = [rajObj, rossObj, callyObj];\n\n        return (\n            <div>\n                <h4>June Challenge</h4>\n                <h6>Run 30 km  |  Cycle 100 km</h6>\n                <StravaTable allRows={allRows} />\n            </div>\n        )\n    }\n}\n\nexport default RajDistance;\n","import React, {Component} from 'react';\nimport './App.css'\nimport Masthead from '../components/Masthead/Masthead.js';\nimport RajDistance from '../components/RajDistance/RajDistance';\n\nclass App extends Component {\n  render () {\n    return (\n        <div className=\"App\">\n          <Masthead />\n          <RajDistance />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}